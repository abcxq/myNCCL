#include<stdio.h>
#include<sys/ioctl.h>
#include<fcntl.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<stdlib.h>
#include<string.h>
#include<termios.h>

int width;      //终端屏幕宽度
int height;     //终端屏幕高度
int filesize;   //文件的大小
int readsize;   //已经显示的内容长度
struct termios ts,ots;     //终端属性

void gettermsize(int *w,int *h)
{
	struct winsize *ws;

	ws=(struct winsize*)malloc(sizeof(struct winsize));

	memset(ws,0x00,sizeof(struct winsize));
	ioctl(STDIN_FILENO,TIOCGWINSZ,ws);
	*w=ws->ws_col;
	*h=ws->ws_row;
}


void settermattr()
{
	tcgetattr(STDIN_FILENO,&ts);    //获取终端属性 
	ots=ts;         //备份终端属性
	ts.c_lflag &= (~ECHO);    //阻止回显
	ts.c_lflag &= (~ICANON);    //设置终端为非标准模式
	ts.c_cc[VMIN]=1;        //这两行当需要从终端获取字符时立即返回，不需要按回车键
	ts.c_cc[VTIME]=0;
	tcsetattr(STDIN_FILENO,TCSAFLUSH,&ts);    //设置终端的新属性。TCSAFLUSH表示输出队列空了以后才生效，生效之前的输出队列被flush
}


void do_more(FILE *fp)
{
	int linesize=width;
	char line[linesize];
	int num_of_lines = 0;     //记录本次读了多少行
	int reply;      //记录see_more()的返回值
	int tmp = 0;
	FILE *fp_tty;
	int i = 0;
	int sizeread[100]; //store the file size which have been read every screen

	memset(sizeread,0,100);
	

	while(fgets(line,linesize,fp))
	{    //从文件中读取一行内容
        	readsize += strlen(line);     //读出的内容长度
        	if(num_of_lines == height)    //如果满屏了
		{
			i++; //the ith screen
			sizeread[i] = readsize ; //store the total file size after ith screen 

			reply = see_more(); //从键盘获取用户输入的命令
			if(reply == 0)
			{        //用户不需要显示更多内容了，要退出
                		tcsetattr(STDIN_FILENO,TCSANOW,&ots);
                		exit(0);
			}
 			if(reply == -1)
			{
				
				fseek(fp,-1*strlen(line),SEEK_CUR);
				readsize = readsize - strlen(line);
				num_of_lines -= abs(reply);
				continue;
			}
			if(reply == -height)
			{
				if ( i == 1) //the first screen
				{
					
					fseek(fp,-1*sizeread[1],SEEK_CUR);
					readsize = readsize - sizeread[1];
					i--;
					num_of_lines -= abs(reply);
					continue;
				}
				else //
				{
					tmp = sizeread[i]-sizeread[i-2];
					fseek(fp,-1*tmp,SEEK_CUR);
					readsize = readsize - tmp;
					i = i-2;
					num_of_lines -= abs(reply);
					continue;
				}
			}		
				
			num_of_lines -= abs(reply);
	        }

	        if(fputs(line,stdout)==EOF)
		{ //把这行内容显示在用户屏幕上
			tcsetattr(STDIN_FILENO,TCSANOW,&ots);        //TCSANOW表示修改立即生效
			perror("fputs error");
			exit(1);
	        }

	        num_of_lines++;
	}
}

int see_more()
{
	int c;
	printf("\033[7m--more--(%2.0f%%)\033[m",(double)readsize/filesize*100);

	while((c=getc(stdin))!=EOF)
	{            //注意加括号，赋值操作符是右结合的。如果不加括号会把getchar()!=EOF的结果赋给c
        	if(c=='q')
		{
			return 0;
	        }
        	if(c==' '|| c == 'f')      //空格
		{
			return height;
		}    
		if(c=='\n'|| c == 'j')
		{     //回车
			return 1;
		}
		if(c == 'k')
		{
			return -1;
		}
		if(c == 'b')
			return -1*height;
	}
	
	return 0;
}


int more(int argc,char *argv[])
{
	FILE *fp;
	struct stat *buf;
	filesize=0;
	readsize=0;
	buf=(struct stat*)malloc(sizeof(struct stat));
	memset(buf,0x00,sizeof(struct stat));



	gettermsize(&width,&height);
	settermattr();


	if(argc==1)     
	{
		printf("arument is error\n");
		return -1;
	}
	else
	{       
		if((fp = fopen(*(argv+1),"r"))!=0)
		{     
                	if(stat((const char*)*(argv+1),buf)==0)
			{   
				filesize += buf->st_size;     //获取文件大小
				printf("fs=%ld\n",buf->st_size);
                		do_more(fp);        //显示文件内容
                	}
                	else
			{
				printf("get  file stst error\n");
                		fclose(fp);      //关闭文件
				return -1;
                	}	
            	}
            	else
		{        //打开文件失败,退出程序
			printf("open file error\n");
			return -1;
		}
        }



    tcsetattr(STDIN_FILENO,TCSANOW,&ots);

	return 0;
}




int main(int argc,char *argv[])
{
	more(argc,argv);
	return 0;
}
